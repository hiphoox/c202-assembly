searchNodes=[{"doc":"","ref":"CodeGenerator.html","title":"CodeGenerator","type":"module"},{"doc":"","ref":"CodeGenerator.html#generateCode/2","title":"CodeGenerator.generateCode/2","type":"function"},{"doc":"Main entry point that handles all the compiling process.","ref":"ExC.html","title":"ExC","type":"module"},{"doc":"Filters command line arguments. Specs argv can take any of the following values: -h or --help : displays help regarding the use of the compiler -v or --verbose : executes the compiler with logs on each step -v or --verbose : executes the compiler with logs on each step Examples $ ./exc &lt;file_to_compile&gt;","ref":"ExC.html#main/1","title":"ExC.main/1","type":"function"},{"doc":"Starts the compilation process given an input path. Specs file_path is the path to the file to be compiled. verbose boolean to indicate if there should be a detailed output of each of the compiler&#39;s stages. Examples $ ./exc examples/test.c","ref":"ExC.html#start_compilation/2","title":"ExC.start_compilation/2","type":"function"},{"doc":"Filters the outputs of Lexer.tokenize/1 and Parser.parse/2.","ref":"Filter.html","title":"Filter","type":"module"},{"doc":"Specs Given the output of the Lexer, it prints any lexing errors or continues with the compilation if there are none. arg is a tuple that contains the following elements: output_token_list: list of all the tokens found in the source code. Refer to Structs.Token for more information. status: atom indicating if there was an invalid token in the source code. source_code_path is the path to the file to be compiled. verbose a boolean value indicating if the compiler should output all of its steps.","ref":"Filter.html#filter_lexer_output/3","title":"Filter.filter_lexer_output/3","type":"function"},{"doc":"Specs Given the output of the Parser, it prints any parsing errors or continues with the compilation if there are none. arg is a tuple that contains the following elements: status: atom indicating if there was an invalid token in the source code. output_abstract_syntax_tree: Abstract Syntax Tree (OAST) generated given Output Token List (OTL). token_list: list of all the bad tokens found in the source code error_cause: string containing the cause of the bad tokens. source_code_path is the path to the file to be compiled. verbose a boolean value indicating if the compiler should output all of its steps.","ref":"Filter.html#filter_parser_output/3","title":"Filter.filter_parser_output/3","type":"function"},{"doc":"","ref":"Helpers.OASTPrinter.html","title":"Helpers.OASTPrinter","type":"module"},{"doc":"","ref":"Helpers.OASTPrinter.html#decide/1","title":"Helpers.OASTPrinter.decide/1","type":"function"},{"doc":"","ref":"Helpers.OASTPrinter.html#eat/2","title":"Helpers.OASTPrinter.eat/2","type":"function"},{"doc":"","ref":"Helpers.OASTPrinter.html#print/2","title":"Helpers.OASTPrinter.print/2","type":"function"},{"doc":"","ref":"Invoker.html","title":"Invoker","type":"module"},{"doc":"","ref":"Invoker.html#invoke_gcc/1","title":"Invoker.invoke_gcc/1","type":"function"},{"doc":"Breaks the source code string (SCS) into an output list of tokens (OTL).","ref":"Lexer.html","title":"Lexer","type":"module"},{"doc":"Returns an output list of tokens (OTL) by breaking the source code string (SCS). Specs arg is a tuple that contains the following elements: source_code_string: source code string. general_token_list: target language&#39;s valid token list. Refer to Reader.read_code_and_tokens/3 for more information.","ref":"Lexer.html#tokenize/1","title":"Lexer.tokenize/1","type":"function"},{"doc":"","ref":"Parser.html","title":"Parser","type":"module"},{"doc":"","ref":"Parser.html#parse/2","title":"Parser.parse/2","type":"function"},{"doc":"Reads all the files the compiler needs.","ref":"Reader.html","title":"Reader","type":"module"},{"doc":"Reads the source code from a file path and a general token list from an XML file. Specs source_code_path is the path to the file to be compiled.tokens_path is the path to an XML file containing the target language&#39;s valid token list. Generates the following output: Source Code String (SCS): source code contained in a string. General Token List (GTL): list of target language valid tokens. Examples iex&gt; {scs, gtl} = Reader.read_code_and_tokens(&#39;examples/test.c&#39;, tokens_path)","ref":"Reader.html#read_code_and_tokens/3","title":"Reader.read_code_and_tokens/3","type":"function"},{"doc":"Reads the structure of the target language&#39;s grammar production rules from an XML file. Specs grammar_prod_rules_path is the path to an XML file containing the target language&#39;s grammar production rules. Generates the following output: General Abstract Syntax Treee (GAST): list containing the target language grammar production rules. Examples iex&gt; gast = Reader.read_general_ast(grammar_prod_rules_path)","ref":"Reader.html#read_general_ast/1","title":"Reader.read_general_ast/1","type":"function"},{"doc":"Reads the structure of the target language&#39;s valid tokens as a General Token List (GTL). Specs tokens_path is the path to an XML file containing the target language&#39;s valid token list. Generates the following output: General Token List (GTL): list of target language&#39;s valid tokens. Examples iex&gt; gtl = Reader.read_general_token_list(tokens_path)","ref":"Reader.html#read_general_token_list/1","title":"Reader.read_general_token_list/1","type":"function"},{"doc":"Reads the source code as a string. Specs source_code_path is the path to the file to be compiled. Generates the following output: Source Code String (SCS): String. Examples iex&gt; scs = Reader.read_source_code_string(source_code_path)","ref":"Reader.html#read_source_code_string/1","title":"Reader.read_source_code_string/1","type":"function"},{"doc":"Defines a Node that represents a grammar production rule in the target programming language.","ref":"Structs.Node.html","title":"Structs.Node","type":"module"},{"doc":"Defines a Token that represents a valid, or invalid, token in the target programming language.","ref":"Structs.Token.html","title":"Structs.Token","type":"module"},{"doc":"","ref":"Writer.html","title":"Writer","type":"module"},{"doc":"","ref":"Writer.html#write_file/1","title":"Writer.write_file/1","type":"function"}]